# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: letter-to-congress

custom:
  tableName: 'Supporters-${self:provider.stage}'

provider:
  name: aws
  runtime: nodejs6.10
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "s3:*"
      Resource: "arn:aws:s3:::facesofdaca-letter-supporters/*"

    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource:
        - { "Fn::GetAtt": ["Supporters", "Arn"] }
  environment:
    SUPPORTERS_TABLE: ${self:custom.tableName}

  profile: default
  stage: dev
  region: us-west-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  requestUploadUrl:
    handler: supporterHandler.requestUploadUrl
    events:
      - http:
          path: requestUploadUrl
          method: post
          cors: true

  verify:
    handler: handler.verify
    events:
      - http:
          path: verify
          method: get

  createSupporter:
    handler: supporterHandler.create
    events:
      - http:
          path: supporter
          method: post

  retrieveSupporter:
    handler: supporterHandler.retrieve
    events:
      - http:
          path: supporter
          method: get

plugins:
  - serverless-offline

resources:
  Resources:
    Supporters:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

        TableName: ${self:custom.tableName}
